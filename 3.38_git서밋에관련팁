1.커밋 메세지 룰과 작성법
  첫번째 라인 : 제목 (필수)
  두번째 라인 : 공란
  세번째 라인 : 내용작성, 무엇을 왜 (선택)
  마지막 라인 : 꼬리말 #이슈 넘버 (선택)

  팁 작성팁 : 최대한 구체적으로 작성, 주간보고 쓸 정도로 작성

2.왜 굳이 git add -> commit 두단계에 걸쳐서 하는지?
  모든 파일을 굳이 기록할 필요가 없기 때문에
  버전을 여러개로 나눠서 만들고 싶은 경우
  git add로 기록할 파일을 고르고
  git commit으로 버전 생성(기록 완료) 

3.커밑 전에 diff확인하기! (매우 좋은 습관)
  명령어 git diff, git difftool인데 보기 불편함

4.언제, 얼마나 commit를 하는게 좋을까?
  예를 들어 회원가입 기능을 만든다고 하면
  - 회원가입 폼 레이아웃 UI를 다 만들면 commit하고
  - 입력한 이메일이 맞는지 검증하는 기능 (유효성 검사)를 만들었으면 commit하고-
  - 서버에 데이터를 전송하는 기능을 만들었으면 commit하고 

  대충 이렇게 작은 작업 하나를 마칠때마다 commit 하는게 좋음
  물론 이 3개를 다 만들고 commit 해도 됨
  중요한건 하루1개 이상 commit 할 것! (좋은 습관)  

5.CLI (Command Line Interface) 명령어 기반 VS GUI를 비교
  명령어는 모든 기능 사용 가능한 반면 GUI 틀은 틀 자체에 구현된 기능만 쓸 수 있다.

6.git push -u origin main 
-u 방금 입력한 주소를 기억해라
그 다음부터는 주소를 길게 입력하지 않고 git push만 입력해도 됨

7.git remote -v
  원격저장소 정보를 보고 싶을때

8.git clone http://원격저장소 주소 - 선생님 브랜치 가져온것 처럼
  원격저장소에 올린 프로젝트를 내 로컬에 복제 (1번만 하면 됨)

9.git pull 원격저장소 주소 (origin) 
  원격저장소에 있는 모든 브랜치 내용을 가져와서 로컬 저장소에 합치라는 뜻

  git pull origin main 
  특정 브랜치(main)만 가져올 수 있음

  (중요) 작업하기 전에 git pull을 받아서 최신 상태를 만들어놓고 작업 시작!
  (참고로) git pull 명령어는 git fetch + git merge를 합친 것
  git fetch는 원격 저장소의 최신 내용(cmmit)을 받아오는 것
  git merge는 그걸 merge(병합)하라는 뜻

10.저장소에 올리지 않은 파일들은 .gitignore
  설정 파일이나 빌드 산출물, 기타 라이브러리 파일들 등 불필요한 파일들은올리지 않는것이 좋음
  gitigone파일을 만들어서 올리지 않을 폴더나 파일을 명시하면 됨
  그러면 git에서 해당 폴더와 파일을 무시함